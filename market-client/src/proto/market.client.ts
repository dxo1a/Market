// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "market.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MarketService } from "./market";
import type { LogoutResponse } from "./market";
import type { LogoutRequest } from "./market";
import type { LoginResponse } from "./market";
import type { LoginRequest } from "./market";
import type { RegisterResponse } from "./market";
import type { RegisterRequest } from "./market";
import type { UpdateProfileResponse } from "./market";
import type { UpdateProfileRequest } from "./market";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetProfileResponse } from "./market";
import type { EmptyRequest } from "./market";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service MarketService
 */
export interface IMarketServiceClient {
    /**
     * @generated from protobuf rpc: GetProfile(EmptyRequest) returns (GetProfileResponse);
     */
    getProfile(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, GetProfileResponse>;
    /**
     * @generated from protobuf rpc: UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse);
     */
    updateProfile(input: UpdateProfileRequest, options?: RpcOptions): UnaryCall<UpdateProfileRequest, UpdateProfileResponse>;
    /**
     * @generated from protobuf rpc: Register(RegisterRequest) returns (RegisterResponse);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, RegisterResponse>;
    /**
     * @generated from protobuf rpc: Login(LoginRequest) returns (LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse>;
    /**
     * @generated from protobuf rpc: Logout(LogoutRequest) returns (LogoutResponse);
     */
    logout(input: LogoutRequest, options?: RpcOptions): UnaryCall<LogoutRequest, LogoutResponse>;
}
/**
 * @generated from protobuf service MarketService
 */
export class MarketServiceClient implements IMarketServiceClient, ServiceInfo {
    typeName = MarketService.typeName;
    methods = MarketService.methods;
    options = MarketService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetProfile(EmptyRequest) returns (GetProfileResponse);
     */
    getProfile(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, GetProfileResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EmptyRequest, GetProfileResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse);
     */
    updateProfile(input: UpdateProfileRequest, options?: RpcOptions): UnaryCall<UpdateProfileRequest, UpdateProfileResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateProfileRequest, UpdateProfileResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Register(RegisterRequest) returns (RegisterResponse);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, RegisterResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterRequest, RegisterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Login(LoginRequest) returns (LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, LoginResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Logout(LogoutRequest) returns (LogoutResponse);
     */
    logout(input: LogoutRequest, options?: RpcOptions): UnaryCall<LogoutRequest, LogoutResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<LogoutRequest, LogoutResponse>("unary", this._transport, method, opt, input);
    }
}
